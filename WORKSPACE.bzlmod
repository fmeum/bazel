# This file will replace the content of the WORKSPACE file when Bzlmod is enabled
# No WORKSPACE prefix or suffix are added.

bind(
    name = "android/sdk",
    actual = "@bazel_tools//tools/android:poison_pill_android_sdk",
)

bind(
    name = "android/dx_jar_import",
    actual = "@bazel_tools//tools/android:no_android_sdk_repository_error",
)

bind(
    name = "android/d8_jar_import",
    actual = "@bazel_tools//tools/android:no_android_sdk_repository_error",
)

bind(
    name = "android/crosstool",
    actual = "@bazel_tools//tools/cpp:toolchain",
)

bind(
    name = "android_sdk_for_testing",
    actual = "@bazel_tools//tools/android:empty",
)

bind(
    name = "android_ndk_for_testing",
    actual = "@bazel_tools//tools/android:empty",
)

bind(
    name = "databinding_annotation_processor",
    actual = "@bazel_tools//tools/android:empty",
)

# This value is overridden by android_sdk_repository function to allow targets
# to select on whether or not android_sdk_repository has run.
bind(
    name = "has_androidsdk",
    actual = "@bazel_tools//tools/android:always_false",
)

# To run the Android integration tests in //src/test/shell/bazel/android:all or
# build the Android sample app in //examples/android/java/bazel:hello_world
#
#   1. Install an Android SDK and NDK from https://developer.android.com
#   2. Set the $ANDROID_HOME and $ANDROID_NDK_HOME environment variables
#   3. Uncomment the two lines below
#
# android_sdk_repository(name = "androidsdk")
# android_ndk_repository(name = "androidndk")

# Introduce the "kythe_release" repo for Kythe build.
local_repository(
    name = "kythe_release",
    path = "/usr/local/kythe",
)

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
    name = "musl_toolchains",
    sha256 = "79c3dab39eb52a9c0927f6a222e2a10b733fd875ccdad59feadd5b30fd4518fb",
    url = "https://github.com/bazel-contrib/musl-toolchain/releases/download/v0.1.9/musl_toolchain-v0.1.9.tar.gz",
)

load("@musl_toolchains//:repositories.bzl", "load_musl_toolchains")

load_musl_toolchains()

load("@musl_toolchains//:toolchains.bzl", "register_musl_toolchains")

register_musl_toolchains()